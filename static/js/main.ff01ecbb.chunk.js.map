{"version":3,"sources":["index.js"],"names":["SaveDialogueButton","className","onClick","this","props","React","Component","ClearDialogueButton","DialogueButtonsContainer","sentences","currentDialogueTitle","onSaveClick","onClearClick","Sentence","sentence","speaker","DialogueText","forEach","i","push","line","CurrentSpeakerText","currentSpeakerText","currentSpeakerIsA","DialogueContainer","onSaveDialogue","onClearDialogue","onLoadClick","onLoadDialogue","DialogueTitle","value","onChange","placeholder","CurrentSpeakerTracker","CurrentSpeakerInput","id","type","SwitchCurrentSpeakerButton","InputContainer","state","handleCurrentSpeakerTyping","bind","handleSwitchSpeaker","handleGiveDialogueTitle","e","onCurrentSpeakerTyping","onSwitchSpeaker","onGiveDialogueTitle","LoadSavedDialogueButton","datatitle","DeleteSavedDialogueButton","SavedDialogueTitle","title","SavedDialogueListItem","onDeleteDialogue","SavedDialogueList","savedDialoguesString","localStorage","getItem","console","log","savedDialoguesArray","split","savedDialoguesList","nanoid","WriteNewDialogueButton","ViewSavedDialoguesButton","ToggleViewButtons","writeButtonStyle","onWritingViewClick","loadButtonStyle","onSavedDialogueViewClick","Header","AppContainer","dialogueTitleList","numberOfDialogues","nextLine","isViewingSavedDialogues","handleSwitchToWritingView","handleSwitchToSavedDialoguesView","handleSaveDialogue","handleClearDialogue","handleLoadDialogue","handleDeleteDialogue","savedDialogueListItems","document","querySelectorAll","setState","target","currentSpeakerInput","getElementById","concat","focus","includes","alert","dialogue","stringDialogue","JSON","stringify","setItem","storedDialogue","parse","getAttribute","length","thisDialogueTitle","updatedDialogueList","filter","updatedDialogueString","join","undefined","removeItem","existingStorage","dialogues","handleFindNumberOfDialogues","ReactDom","render"],"mappings":"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","file":"static/js/main.ff01ecbb.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDom from 'react-dom';\nimport './index.css';\nimport { nanoid } from 'nanoid';\n\n/*\n  dialogue control buttons section\n*/\n\nclass SaveDialogueButton extends React.Component {\n  render() {\n\n    return(\n      <button \n        className=\"dialogue-button save-button\"\n        onClick={this.props.onClick}\n      >\n        Save Dialogue\n      </button>\n    )\n  }\n}\n\nclass ClearDialogueButton extends React.Component {\n  render() {\n    return(\n      <button\n        className=\"dialogue-button clear-button\"\n        onClick={this.props.onClick}\n      >\n        Clear Dialogue\n      </button>\n    );\n  }\n}\n\nclass DialogueButtonsContainer extends React.Component {\n  render() {\n    return(\n      <div className=\"save-button-container\">\n        <SaveDialogueButton \n          sentences={this.props.sentences}\n          currentDialogueTitle={this.props.currentDialogueTitle}\n          onClick={this.props.onSaveClick}\n        />\n        <ClearDialogueButton \n          sentences={this.props.sentences}\n          onClick={this.props.onClearClick}\n        />\n        {/*<LoadDialogueButton \n          sentences={this.props.sentences}\n          onClick={this.props.onLoadClick}\n        />*/}\n      </div>\n    );\n  }\n} \n\n/*\n  display current dialogue section\n*/\n\nclass Sentence extends React.Component {\n  render() {\n    const sentence = this.props.sentence;\n    const speaker = this.props.speaker;\n    return (\n      <div className=\"dialogue-line\">\n        <p className=\"dialogue-speaker\">{speaker}: </p>\n        <p className=\"dialogue-sentence\">{sentence}</p>\n      </div>\n\n    );\n  }\n}\n\nclass DialogueText extends React.Component {\n  render() {\n    const sentences = [];\n    // const nextLine = this.props.nextLine;\n    this.props.sentences.forEach((sentence, i) => {\n      sentences.push(\n        <Sentence\n          speaker={sentence.speaker}\n          sentence={sentence.line}\n          key={i}\n        />\n      )\n    });\n\n    return(\n      <div \n        className=\"dialogue-text\"\n      >\n        {sentences}\n      </div>\n    )\n  }\n}\n\nclass CurrentSpeakerText extends React.Component {\n  render() {\n    const currentSpeakerText = this.props.currentSpeakerText\n    const currentSpeakerIsA = \"Speaker \" + (this.props.currentSpeakerIsA ? \"A\" : \"B\") + \": \"\n    return(\n      <p>{currentSpeakerIsA + \" \" + currentSpeakerText}</p>\n    );\n  }\n}\n\nclass DialogueContainer extends React.Component {\n  \n  render() {\n    return (\n      <section className=\"dialogue-section\">\n        <div className=\"container\">\n          <DialogueButtonsContainer \n            sentences={this.props.sentences}\n            currentDialogueTitle={this.props.currentDialogueTitle}\n            onSaveClick={this.props.onSaveDialogue}\n            onClearClick={this.props.onClearDialogue}\n            onLoadClick={this.props.onLoadDialogue}\n          />\n          <DialogueText \n            sentences={this.props.sentences}\n          />\n          <CurrentSpeakerText \n            currentSpeakerText={this.props.currentSpeakerText}\n            currentSpeakerIsA={this.props.currentSpeakerIsA}\n          />\n        </div>\n      </section>\n\n    );\n  }\n}\n\n/*\n  write dialogue section\n*/\n\nclass DialogueTitle extends React.Component {\n  render() {\n    return(\n      <div className=\"dialogue-title-container\">\n        <label>\n          What is the title? \n          <input\n            value={this.props.currentDialogueTitle}\n            onChange={this.props.onChange}\n            placeholder=\"Title...\"\n          ></input>\n        </label>\n      </div>\n    )\n  }\n}\n\nclass CurrentSpeakerTracker extends React.Component {\n  render() {\n    const currentSpeakerIsA = this.props.currentSpeakerIsA;\n    return(\n\n      <p>Current speaker: {currentSpeakerIsA ? \"A\" : \"B\"}</p>\n    )\n  }\n}\n\nclass CurrentSpeakerInput extends React.Component {\n  render() {\n    return(\n      <textarea\n        id=\"currentSpeakerInput\"\n        className=\"speaker-input-textarea\"\n        type=\"text\"\n        placeholder={\"What do you want to say?\"}\n        value={this.props.currentSpeakerText}\n        onChange={this.props.onChange}\n      >\n      </textarea>\n\n    );\n  }\n}\n\nclass SwitchCurrentSpeakerButton extends React.Component {\n  render() {\n    return(\n      <button \n        // type=\"submit\"\n        className=\"speaker-input-button\"\n        onClick={this.props.onClick}\n      >\n      Submit\n      </button>\n\n    )\n  }\n}\n\nclass InputContainer extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      currentSpeakerText: '',\n    }\n    this.handleCurrentSpeakerTyping = this.handleCurrentSpeakerTyping.bind(this);\n    this.handleSwitchSpeaker = this.handleSwitchSpeaker.bind(this);\n    this.handleGiveDialogueTitle = this.handleGiveDialogueTitle.bind(this);\n  }\n\n  handleCurrentSpeakerTyping(e) {\n    this.props.onCurrentSpeakerTyping(e)\n  }\n\n  handleSwitchSpeaker() {\n    this.props.onSwitchSpeaker()\n  }\n\n  handleGiveDialogueTitle(e) {\n    this.props.onGiveDialogueTitle(e)\n  }\n\n  render() {\n    return (\n      <section className=\"dialogue-inputs-container\">\n        <div className=\"container\">\n          <h2>New Dialogue</h2>\n          <DialogueTitle \n            currentDialogueTitle={this.props.currentDialogueTitle}\n            onChange={this.handleGiveDialogueTitle}\n          />\n          <CurrentSpeakerTracker \n            currentSpeakerIsA={this.props.currentSpeakerIsA}\n          />\n          <div className=\"speaker-inputs\">\n            <CurrentSpeakerInput \n              currentSpeakerText={this.props.currentSpeakerText}\n              onChange={this.handleCurrentSpeakerTyping}\n              value={this.props.currentSpeakerText}\n            />\n            <SwitchCurrentSpeakerButton \n              onClick={this.handleSwitchSpeaker}\n            />\n          </div>\n        </div>\n      </section>\n    )\n  }\n}\n\n/*\n  saved dialogue list section\n*/\n\n\nclass LoadSavedDialogueButton extends React.Component {\n  render() {\n    return(\n      <button \n        className=\"saved-dialogue-list-load-button\"\n        datatitle={this.props.datatitle}\n        onClick={this.props.onClick}\n      >\n        load\n      </button>\n    );\n  }\n}\n\nclass DeleteSavedDialogueButton extends React.Component {\n  render() {\n    return(\n      <button\n        className=\"saved-dialogue-list-delete-button\"\n        datatitle={this.props.datatitle}\n        onClick={this.props.onClick}\n\n      >\n        delete\n      </button>\n    );\n  }\n}\n\nclass SavedDialogueTitle extends React.Component {\n  render() {\n    return(\n        <p>{this.props.title}</p> \n    )\n  }\n}\n\nclass SavedDialogueListItem extends React.Component {\n  render() {\n    return(\n      <div className=\"saved-dialogue-list-item\">\n        <SavedDialogueTitle \n          title={this.props.title}\n        />\n        <div>\n          <LoadSavedDialogueButton\n            // key={nanoid()} \n            onClick={this.props.onLoadDialogue}\n            datatitle={this.props.title}\n          />\n          <DeleteSavedDialogueButton \n            // key={nanoid()}\n            onClick={this.props.onDeleteDialogue}\n            datatitle={this.props.title}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nclass SavedDialogueList extends React.Component {\n  render() {\n    const savedDialoguesString = localStorage.getItem('dialogue_list');\n    console.log(savedDialoguesString);\n    if (savedDialoguesString === null) {\n      return(\n        <section className=\"saved-dialogue-list\">\n          <div className=\"container\">\n            <h2>Saved Dialogues</h2>\n            <p>There are no dialogues</p>\n          </div>\n        </section>\n      )\n    } else {  \n      const savedDialoguesArray = savedDialoguesString.split(', ')\n      const savedDialoguesList = [];\n\n      savedDialoguesArray.forEach((title, i) => {\n        savedDialoguesList.push(\n          <SavedDialogueListItem \n            key={nanoid()}\n            title={title}\n            onLoadDialogue={this.props.onLoadDialogue}\n            onDeleteDialogue={this.props.onDeleteDialogue}\n          />\n          \n        )\n      }) \n\n      return(\n        <section className=\"saved-dialogue-list\">\n          <div className=\"container\">\n            <h2>Saved Dialogues</h2>\n            {savedDialoguesList}\n          </div>\n        </section>\n      )\n    }\n  } \n}\n\n\n\nclass WriteNewDialogueButton extends React.Component {\n  render() {\n    return (\n      <button\n        className={this.props.className}\n        onClick={this.props.onClick}\n      >\n      write dialogue\n      </button>   \n    )   \n  }\n}\n\nclass ViewSavedDialoguesButton extends React.Component {\n  render() {\n    return(\n      <button\n        className={this.props.className}\n        onClick={this.props.onClick}\n      >\n      load dialogue\n      </button>\n    )\n  }\n}\n\nclass ToggleViewButtons extends React.Component {\n  render() {\n    return(\n      <section className=\"app-view-toggles\">\n        <div className=\"container\">\n          <p>What do you want to do?</p>\n          <div className=\"view-toggle-button-wrapper\">\n            <WriteNewDialogueButton \n              className={this.props.writeButtonStyle}\n              onClick={this.props.onWritingViewClick}\n            />\n            <ViewSavedDialoguesButton \n              className={this.props.loadButtonStyle}\n              onClick={this.props.onSavedDialogueViewClick}\n            />\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n\nclass Header extends React.Component {\n  render() {\n    return(\n      <section className=\"app-header\">\n        <div className=\"container\">\n          \n          <h1>Scriptt</h1>\n          <p className=\"description-text\">\n            Write quick and easy dialogues for your language classes.\n          </p>\n        </div>\n      </section>\n    );\n  }\n}\n\nclass AppContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sentences: [],\n      currentDialogueTitle: '',\n      dialogueTitleList: localStorage.getItem('dialogue_list'),\n      numberOfDialogues: this.props.numberOfDialogues,\n      nextLine: '',\n      currentSpeakerIsA: true,\n      currentSpeakerText: '',\n      isViewingSavedDialogues: false,\n      writeButtonStyle: 'view-toggle-button-selected left',\n      loadButtonStyle: 'view-toggle-button right'\n    }\n    // functions to toggle between views\n    this.handleSwitchToWritingView = this.handleSwitchToWritingView.bind(this);\n    this.handleSwitchToSavedDialoguesView = this.handleSwitchToSavedDialoguesView.bind(this);\n    // function to give dialogue title\n    this.handleGiveDialogueTitle = this.handleGiveDialogueTitle.bind(this);\n    // function to capture current speaker's text\n    this.handleCurrentSpeakerTyping = this.handleCurrentSpeakerTyping.bind(this);\n    // function to toggle between speakers\n    this.handleSwitchSpeaker = this.handleSwitchSpeaker.bind(this);\n    // function to save dialogue\n    this.handleSaveDialogue = this.handleSaveDialogue.bind(this);\n    // function to clear dialogue\n    this.handleClearDialogue = this.handleClearDialogue.bind(this);\n    // function to load old dialogue\n    this.handleLoadDialogue = this.handleLoadDialogue.bind(this);\n    // function to delete old dialogue\n    this.handleDeleteDialogue = this.handleDeleteDialogue.bind(this);\n  }\n\n  // functions to toggle between \"write dialogue\" and \"see saved dialogues\" views\n\n  \n\n  handleSwitchToWritingView() {\n    const savedDialogueListItems = document.querySelectorAll('.saved-dialogue-list-item')\n    console.log(savedDialogueListItems)\n    // savedDialogueListItems.forEach((item) => {\n    //  item.classList.add('slide-off')\n    // })\n\n    async function slideOut() {\n      savedDialogueListItems.forEach((item, index) => {\n        setTimeout(async function changeClass() {\n            item.classList.add('slide-off')\n          }, index * 200) \n      // setTimeout(function(){\n      //  item.classList.add('slide-off') \n      // }, 1000)\n      })\n      await delay\n    }\n\n    async function delay() {\n      console.log('done')\n    }\n    // slideOut().then(delay)\n\n    // async function changeState() {\n    //  console.log(\"done\")\n    // }\n\n    // slideOut().then(changeState)\n    this.setState({\n      isViewingSavedDialogues: false,\n      writeButtonStyle: 'view-toggle-button-selected left',\n      loadButtonStyle: 'view-toggle-button right'\n    })\n  }\n\n  handleSwitchToSavedDialoguesView() {\n    this.setState({\n      isViewingSavedDialogues: true,\n      writeButtonStyle: 'view-toggle-button left',\n      loadButtonStyle: 'view-toggle-button-selected right'\n    })\n  }\n\n  handleGiveDialogueTitle(e) {\n    // it is going to be the same as above\n    // console.log(\"You are setting the title!\")\n    this.setState({\n      currentDialogueTitle: e.target.value\n    })\n  }\n\n  handleCurrentSpeakerTyping(e) {\n    // console.log(e.target.value)\n    this.setState({\n      currentSpeakerText: e.target.value,\n    })\n  }\n\n  handleSwitchSpeaker() {\n    const currentSpeakerInput = document.getElementById('currentSpeakerInput');\n\n    if (!this.state.currentSpeakerIsA) {\n      this.setState({\n        sentences: this.state.sentences.concat([{line: this.state.currentSpeakerText, speaker: (this.state.currentSpeakerIsA ? \"A\" : \"B\")}]),\n        currentSpeakerIsA: true,\n        currentSpeakerText: ''\n      });\n    } else {\n      this.setState({\n        sentences: this.state.sentences.concat({line: this.state.currentSpeakerText, speaker: (this.state.currentSpeakerIsA ? \"A\" : \"B\")}),\n        currentSpeakerIsA: false,\n        currentSpeakerText: ''\n      })\n    }\n    currentSpeakerInput.focus();\n  }\n\n  handleSaveDialogue() {\n    // check if there are 5 dialogues in local storage\n    if (!(this.state.numberOfDialogues < 5)) {\n      alert(\"you already have 5 dialogues, please delete one before making more\")\n      return;\n    } else {\n      console.log(\"you can still save dialogues\")\n    }\n\n    // check if the title is taken\n    console.log(this.state.currentDialogueTitle)\n    console.log(this.state.dialogueTitleList)\n    if (this.state.currentDialogueTitle === \"\") {\n      alert(\"You need to give your dialogue a title\")\n      return;\n    }\n\n    // check if the dialogue list is empty \n    // and check if the dialogue is already in the list\n    if (this.state.dialogueTitleList !== null && this.state.dialogueTitleList.includes(this.state.currentDialogueTitle)) {\n      alert(\"This title is already in your saved dialogue list. This new dialogue will save over the old one.\")\n      let dialogue = this.state.sentences;\n      let currentDialogueTitle = this.state.currentDialogueTitle\n      let stringDialogue = JSON.stringify(dialogue);\n      localStorage.setItem(currentDialogueTitle, stringDialogue);\n      alert(\"You saved your dialogue\")\n      return;\n    }\n\n    // Part 1: update the list of dialogue titles\n    // grab the current dialogue title\n    let currentDialogueTitle = this.state.currentDialogueTitle\n    // console.log(currentDialogueTitle)\n\n    // grab the previous updated title list\n    let dialogueTitleList = this.state.dialogueTitleList\n    // console.log(dialogueTitleList)\n\n    // buggy behavior, if list null needs to be set to empty string..\n    // something needs to be fixed here\n    if (this.state.dialogueTitleList === null) {\n      dialogueTitleList = ''\n    }\n\n    // add the current title to the previous title list\n    if (dialogueTitleList === '') {\n      dialogueTitleList += currentDialogueTitle;\n    } else {\n      dialogueTitleList += `, ${currentDialogueTitle}`;\n    }\n\n    // set title list state to the newly updated title list\n    this.setState({\n      dialogueTitleList: dialogueTitleList,\n      numberOfDialogues: this.state.numberOfDialogues + 1\n    })\n\n    // store the newly updated title list on top of \n    // the previously stored \"dialogue_list\"\n    localStorage.setItem(\"dialogue_list\", dialogueTitleList)\n\n    // Part 2: store the current dialogue\n    // console.log(dialogueTitleList)\n    let dialogue = this.state.sentences;\n    let stringDialogue = JSON.stringify(dialogue);\n    localStorage.setItem(currentDialogueTitle, stringDialogue);\n    alert(\"You saved your dialogue\")\n  }\n\n  handleClearDialogue() {\n    console.log(\"The clear button works!\")\n    this.setState({\n      sentences: [],\n      currentSpeakerIsA: true\n    })\n  }\n\n  handleLoadDialogue(e) {\n    // console.log(\"success\");\n    // console.log(e.target);\n    // console.log(e.target.getAttribute('datatitle'));\n    const storedDialogue = JSON.parse(localStorage.getItem(e.target.getAttribute('datatitle')))\n    // console.log(\"logging the storedDialogue\")\n    // console.log(storedDialogue)\n    this.setState({\n      sentences: storedDialogue,\n      currentDialogueTitle: e.target.getAttribute('datatitle'),\n      isViewingSavedDialogues: false,\n      writeButtonStyle: 'view-toggle-button-selected',\n      loadButtonStyle: 'view-toggle-button'\n    })\n    if (storedDialogue.length === 0) {\n      this.setState({\n        currentSpeakerIsA: true, \n      })\n    } else if (storedDialogue[storedDialogue.length-1].speaker === \"B\") {\n      this.setState({\n        currentSpeakerIsA: true, \n      })\n    } else {\n      this.setState({\n        currentSpeakerIsA: false,\n      })\n    }\n\n    // focusInputOnLoad();\n  }\n\n  handleDeleteDialogue(e) {\n    // console.log(\"you deleted a dialogue.\")\n    // 1. this function needs to delete from dialogues list\n      // call the list of dialogues\n      // turn it into an array\n      // use .filter to remove the index when datatitle matches\n      // return it to a string\n      // setState = to the new string\n      // dialogueTitleList is what we are setting state on\n    // console.log(e.target.getAttribute('datatitle'))\n    const thisDialogueTitle = e.target.getAttribute('datatitle')\n    // console.log(thisDialogueTitle);\n    // console.log(this.state.dialogueTitleList)\n    const currentDialogueList = this.state.dialogueTitleList.split(', ');\n    // console.log(currentDialogueList)\n    const updatedDialogueList = currentDialogueList.filter((dialogue) => {\n      if (!(dialogue === e.target.getAttribute('datatitle'))) {\n        return dialogue\n      }\n    });\n    // console.log(\"this is your updated dialogue list\")\n    // console.log(updatedDialogueList)\n    const updatedDialogueString = updatedDialogueList.join(', ')\n    // console.log(updatedDialogueList[0])\n    if (updatedDialogueList[0] === undefined) {\n      localStorage.removeItem(thisDialogueTitle)\n      localStorage.removeItem('dialogue_list')\n    } else {\n      localStorage.removeItem(thisDialogueTitle)\n      localStorage.setItem('dialogue_list', updatedDialogueString)\n\n    }\n    this.setState({\n      dialogueTitleList: localStorage.getItem('dialogue_list'),\n      numberOfDialogues: this.state.numberOfDialogues - 1\n    })\n    // localStorage.setItem('dialogue_list', updatedDialogues)\n    // console.log(localStorage.getItem('dialogue_list'))\n    // this.setState({\n    //  dialogueTitleList: updatedDialogues\n    // })\n    // this.setState({\n    //  dialogueTitleList: updatedDialogues\n    // })\n\n\n    // 2. and also delete the actual dialogue in storage\n      // take the datatitle\n      // use it to directly remove that dialogue from storage\n      // we should be able to keep storage clean, too\n\n  }\n\n  render() {\n\n    if (!this.state.isViewingSavedDialogues) {\n      return (\n        <div className=\"appContainer\">\n          <Header />\n          <ToggleViewButtons \n            writeButtonStyle={this.state.writeButtonStyle}\n            loadButtonStyle={this.state.loadButtonStyle}\n            onWritingViewClick={this.handleSwitchToWritingView}\n            onSavedDialogueViewClick={this.handleSwitchToSavedDialoguesView}\n          />\n          <InputContainer \n            currentDialogueTitle={this.state.currentDialogueTitle}\n            currentSpeakerText={this.state.currentSpeakerText}\n            currentSpeakerIsA={this.state.currentSpeakerIsA}\n            onCurrentSpeakerTyping={this.handleCurrentSpeakerTyping}\n            onSwitchSpeaker={this.handleSwitchSpeaker}\n            onGiveDialogueTitle={this.handleGiveDialogueTitle}\n          />\n          <DialogueContainer\n            sentences={this.state.sentences}\n            currentDialogueTitle={this.state.currentDialogueTitle}\n            currentSpeakerText={this.state.currentSpeakerText}\n            currentSpeakerIsA={this.state.currentSpeakerIsA}\n            numberOfDialogues={this.state.numberOfDialogues}\n            onSaveDialogue={this.handleSaveDialogue}\n            onClearDialogue={this.handleClearDialogue}\n            \n          />\n        </div>\n      ); \n    } else {\n      return(\n        <div className=\"appContainer\">\n          <Header />\n          <ToggleViewButtons \n            writeButtonStyle={this.state.writeButtonStyle}\n            loadButtonStyle={this.state.loadButtonStyle}\n            onWritingViewClick={this.handleSwitchToWritingView}\n            onSavedDialogueViewClick={this.handleSwitchToSavedDialoguesView}\n          />\n          <SavedDialogueList \n            onLoadDialogue={this.handleLoadDialogue}\n            onDeleteDialogue={this.handleDeleteDialogue}\n          />\n          \n        </div>\n      );\n    }\n  }\n}\n\n\nfunction checkExistingLocalStorage() {\n    console.log(\"checking existing local storage\")\n    return localStorage.getItem('dialogue_list');\n  }\n\nconst existingStorage = checkExistingLocalStorage();\n\nfunction handleFindNumberOfDialogues() {\n  console.log(\"checking for dialogues list\")\n  // console.log(localStorage.getItem('dialogue_list'))\n  // console.log(localStorage.getItem('dialogue_list').split(', '))\n  // // const dialogues = localStorage.getItem('dialogue_list').split(', ')\n  // // console.log(dialogues.length)\n  // // return dialogues.length\n  if (localStorage.getItem('dialogue_list') !== null) {\n      const dialogues = localStorage.getItem('dialogue_list').split(', ')\n      console.log(dialogues.length)\n      return dialogues.length\n    } else {\n      let dialoguesLength = 0;\n      return dialoguesLength;\n    }\n}\n\nconst numberOfDialogues = handleFindNumberOfDialogues();\n\nReactDom.render(\n  <AppContainer\n    // checkExistingLocalStorage={checkExistingLocalStorage}\n    existingStorage={existingStorage}\n    numberOfDialogues={numberOfDialogues}\n  />,\n  document.getElementById('root')\n);\n\n// function focusInputOnLoad() {\n//  const currentSpeakerInput = document.getElementById('currentSpeakerInput');\n//  currentSpeakerInput.focus()\n// }\n\n// focusInputOnLoad();\n"],"sourceRoot":""}